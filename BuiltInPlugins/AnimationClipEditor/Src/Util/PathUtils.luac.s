PROTO_0:
  NEWTABLE R1 0 0
  GETIMPORT R2 K1 [ipairs]
  MOVE R3 R0
  CALL R2 1 3
  FORGPREP_INEXT R2
  LOADN R7 1
  JUMPIFNOTLT R7 R5 [+8]
  FASTCALL2 TABLE_INSERT R1 R6 [+5]
  MOVE R8 R1
  MOVE R9 R6
  GETIMPORT R7 K4 [table.insert]
  CALL R7 2 0
  FORGLOOP R2 2 [inext] [-11]
  RETURN R1 1

PROTO_1:
  GETUPVAL R1 0
  NEWTABLE R2 0 0
  MOVE R3 R0
  CALL R1 2 1
  LENGTH R2 R1
  LOADNIL R3
  SETTABLE R3 R1 R2
  RETURN R1 1

PROTO_2:
  GETUPVAL R2 0
  GETTABLEKS R1 R2 K0 ["COMPONENT_PATH_BASE_SCALE"]
  LOADN R2 0
  GETIMPORT R3 K2 [ipairs]
  MOVE R4 R0
  CALL R3 1 3
  FORGPREP_INEXT R3
  GETUPVAL R10 0
  GETTABLEKS R9 R10 K3 ["COMPONENT_PATH_VALUE"]
  GETTABLE R8 R9 R7
  JUMPIFNOT R8 [+6]
  MUL R9 R1 R8
  ADD R2 R2 R9
  GETUPVAL R10 0
  GETTABLEKS R9 R10 K0 ["COMPONENT_PATH_BASE_SCALE"]
  MUL R1 R1 R9
  FORGLOOP R3 2 [inext] [-12]
  RETURN R2 1

PROTO_3:
  JUMPIFNOT R0 [+5]
  JUMPIFNOT R1 [+4]
  LENGTH R2 R0
  LENGTH R3 R1
  JUMPIFEQ R2 R3 [+3]
  LOADB R2 0
  RETURN R2 1
  GETIMPORT R2 K1 [ipairs]
  MOVE R3 R0
  CALL R2 1 3
  FORGPREP_INEXT R2
  GETTABLE R7 R1 R5
  JUMPIFEQ R6 R7 [+3]
  LOADB R7 0
  RETURN R7 1
  FORGLOOP R2 2 [inext] [-6]
  LOADB R2 1
  RETURN R2 1

PROTO_4:
  JUMPIFNOT R0 [+1]
  JUMPIF R1 [+2]
  LOADNIL R2
  RETURN R2 1
  GETIMPORT R2 K1 [ipairs]
  MOVE R3 R0
  CALL R2 1 3
  FORGPREP_INEXT R2
  GETUPVAL R8 0
  GETTABLEKS R7 R8 K2 ["equals"]
  MOVE R8 R6
  MOVE R9 R1
  CALL R7 2 1
  JUMPIFNOT R7 [+1]
  RETURN R5 1
  FORGLOOP R2 2 [inext] [-9]
  LOADNIL R2
  RETURN R2 1

PROTO_5:
  GETUPVAL R3 0
  GETTABLEKS R2 R3 K0 ["findPath"]
  MOVE R3 R0
  MOVE R4 R1
  CALL R2 2 1
  JUMPIFNOT R2 [+9]
  GETUPVAL R5 1
  GETTABLEKS R4 R5 K1 ["List"]
  GETTABLEKS R3 R4 K2 ["removeIndex"]
  MOVE R4 R0
  MOVE R5 R2
  CALL R3 2 -1
  RETURN R3 -1
  RETURN R0 1

PROTO_6:
  GETIMPORT R1 K2 [table.concat]
  MOVE R2 R0
  LOADK R3 K3 ["."]
  CALL R1 2 -1
  RETURN R1 -1

MAIN:
  PREPVARARGS 0
  GETIMPORT R0 K1 [script]
  LOADK R2 K2 ["AnimationClipEditor"]
  NAMECALL R0 R0 K3 ["FindFirstAncestor"]
  CALL R0 2 1
  GETIMPORT R1 K5 [require]
  GETTABLEKS R3 R0 K6 ["Packages"]
  GETTABLEKS R2 R3 K7 ["Framework"]
  CALL R1 1 1
  GETTABLEKS R2 R1 K8 ["Dash"]
  GETTABLEKS R3 R2 K9 ["join"]
  GETIMPORT R4 K5 [require]
  GETTABLEKS R6 R0 K6 ["Packages"]
  GETTABLEKS R5 R6 K10 ["Cryo"]
  CALL R4 1 1
  GETIMPORT R5 K5 [require]
  GETTABLEKS R8 R0 K11 ["Src"]
  GETTABLEKS R7 R8 K12 ["Util"]
  GETTABLEKS R6 R7 K13 ["Constants"]
  CALL R5 1 1
  GETIMPORT R6 K5 [require]
  GETTABLEKS R8 R0 K14 ["LuaFlags"]
  GETTABLEKS R7 R8 K15 ["GetFFlagFixDynamicTrackSelection"]
  CALL R6 1 1
  NEWTABLE R7 8 0
  DUPCLOSURE R8 K16 [PROTO_0]
  SETTABLEKS R8 R7 K17 ["getRelativePath"]
  DUPCLOSURE R8 K18 [PROTO_1]
  CAPTURE VAL R3
  SETTABLEKS R8 R7 K19 ["getParentPath"]
  MOVE R8 R6
  CALL R8 0 1
  JUMPIF R8 [+4]
  DUPCLOSURE R8 K20 [PROTO_2]
  CAPTURE VAL R5
  SETTABLEKS R8 R7 K21 ["getPathValue"]
  DUPCLOSURE R8 K22 [PROTO_3]
  SETTABLEKS R8 R7 K23 ["equals"]
  DUPCLOSURE R8 K24 [PROTO_4]
  CAPTURE VAL R7
  SETTABLEKS R8 R7 K25 ["findPath"]
  DUPCLOSURE R8 K26 [PROTO_5]
  CAPTURE VAL R7
  CAPTURE VAL R4
  SETTABLEKS R8 R7 K27 ["removePath"]
  DUPCLOSURE R8 K28 [PROTO_6]
  SETTABLEKS R8 R7 K29 ["toString"]
  RETURN R7 1
